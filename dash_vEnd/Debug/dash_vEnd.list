
dash_vEnd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b91c  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020408  08020408  00022014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020408  08020408  00021408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020410  08020410  00022014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020410  08020410  00021410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020414  08020414  00021414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08020418  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f38  20000014  0802042c  00022014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f4c  0802042c  00022f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd68  00000000  00000000  00022044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226d  00000000  00000000  0002fdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002bc1  00000000  00000000  00032c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f9ba  00000000  00000000  00035851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e9fb4  00000000  00000000  0004520b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012f1bf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000096f  00000000  00000000  0012f202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003218  00000000  00000000  0012fb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00132d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad4 	.word	0x08004ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004ad4 	.word	0x08004ad4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxCpltCallback>:

volatile uint8_t dma_done = 0;
static uint8_t dma_buffer[ILI9488_WIDTH * PIXEL_SIZE * BLOCK_ROWS];

//DMA - Callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <HAL_SPI_TxCpltCallback+0x24>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d102      	bne.n	800050a <HAL_SPI_TxCpltCallback+0x16>
        dma_done = 1;
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <HAL_SPI_TxCpltCallback+0x28>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
    }
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20003e14 	.word	0x20003e14
 800051c:	20000030 	.word	0x20000030

08000520 <ILI9488_SendCommand>:
// Private function to send command
static void ILI9488_SendCommand(uint8_t cmd) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET); // DC = 0
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f001 fd46 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000538:	2200      	movs	r2, #0
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <ILI9488_SendCommand+0x44>)
 800053e:	f001 fd41 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000542:	1df9      	adds	r1, r7, #7
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	2201      	movs	r2, #1
 800054a:	4807      	ldr	r0, [pc, #28]	@ (8000568 <ILI9488_SendCommand+0x48>)
 800054c:	f003 f915 	bl	800377a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000550:	2201      	movs	r2, #1
 8000552:	2140      	movs	r1, #64	@ 0x40
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <ILI9488_SendCommand+0x44>)
 8000556:	f001 fd35 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	48000400 	.word	0x48000400
 8000568:	20003e14 	.word	0x20003e14

0800056c <ILI9488_SendData>:

// Private function to send data
static void ILI9488_SendData(uint8_t data) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);   // DC = 1
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000580:	f001 fd20 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	@ 0x40
 8000588:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <ILI9488_SendData+0x44>)
 800058a:	f001 fd1b 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <ILI9488_SendData+0x48>)
 8000598:	f003 f8ef 	bl	800377a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);   // CS = 1
 800059c:	2201      	movs	r2, #1
 800059e:	2140      	movs	r1, #64	@ 0x40
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <ILI9488_SendData+0x44>)
 80005a2:	f001 fd0f 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000400 	.word	0x48000400
 80005b4:	20003e14 	.word	0x20003e14

080005b8 <ILI9488_Reset>:

// Functin to execute SW reset (NSS - SW mode)
static void ILI9488_Reset(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RST_GPIO_Port, ILI9488_RST_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c6:	f001 fcfd 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80005ca:	2014      	movs	r0, #20
 80005cc:	f001 f822 	bl	8001614 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RST_GPIO_Port, ILI9488_RST_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f001 fcf3 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 80005de:	2096      	movs	r0, #150	@ 0x96
 80005e0:	f001 f818 	bl	8001614 <HAL_Delay>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <ILI9488_Init>:
	b = b << 2;
	uint8_t data[3] = {b, g, r};
}

// Init for the dashboard
void ILI9488_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	 ILI9488_Reset();
 80005ec:	f7ff ffe4 	bl	80005b8 <ILI9488_Reset>
	    HAL_Delay(10);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f001 f80f 	bl	8001614 <HAL_Delay>

	    ILI9488_SendCommand(0x11); // Sleep out
 80005f6:	2011      	movs	r0, #17
 80005f8:	f7ff ff92 	bl	8000520 <ILI9488_SendCommand>
	    HAL_Delay(120);
 80005fc:	2078      	movs	r0, #120	@ 0x78
 80005fe:	f001 f809 	bl	8001614 <HAL_Delay>

	    ILI9488_SendCommand(0x3A); // Pixel format
 8000602:	203a      	movs	r0, #58	@ 0x3a
 8000604:	f7ff ff8c 	bl	8000520 <ILI9488_SendCommand>
	    ILI9488_SendData(0x66);    // 18 bits per pixel (RGB666)
 8000608:	2066      	movs	r0, #102	@ 0x66
 800060a:	f7ff ffaf 	bl	800056c <ILI9488_SendData>

	    ILI9488_SendCommand(0x36); // MADCTL
 800060e:	2036      	movs	r0, #54	@ 0x36
 8000610:	f7ff ff86 	bl	8000520 <ILI9488_SendCommand>
	    ILI9488_SendData(0x28);    // Landscape + BGR
 8000614:	2028      	movs	r0, #40	@ 0x28
 8000616:	f7ff ffa9 	bl	800056c <ILI9488_SendData>

	    ILI9488_SendCommand(0x29); // Display on
 800061a:	2029      	movs	r0, #41	@ 0x29
 800061c:	f7ff ff80 	bl	8000520 <ILI9488_SendCommand>
	    HAL_Delay(20);
 8000620:	2014      	movs	r0, #20
 8000622:	f000 fff7 	bl	8001614 <HAL_Delay>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <ILI9488_SetWindow>:

// Private function to set window
static void ILI9488_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800062a:	b590      	push	{r4, r7, lr}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	4604      	mov	r4, r0
 8000632:	4608      	mov	r0, r1
 8000634:	4611      	mov	r1, r2
 8000636:	461a      	mov	r2, r3
 8000638:	4623      	mov	r3, r4
 800063a:	80fb      	strh	r3, [r7, #6]
 800063c:	4603      	mov	r3, r0
 800063e:	80bb      	strh	r3, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
 8000644:	4613      	mov	r3, r2
 8000646:	803b      	strh	r3, [r7, #0]
    ILI9488_SendCommand(ILI9488_CMD_COLUMN_ADDR);
 8000648:	202a      	movs	r0, #42	@ 0x2a
 800064a:	f7ff ff69 	bl	8000520 <ILI9488_SendCommand>
    ILI9488_SendData(x0 >> 8);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b29b      	uxth	r3, r3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff88 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(x0 & 0xFF);
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff83 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(x1 >> 8);
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff7c 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(x1 & 0xFF);
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff77 	bl	800056c <ILI9488_SendData>

    ILI9488_SendCommand(ILI9488_CMD_PAGE_ADDR);
 800067e:	202b      	movs	r0, #43	@ 0x2b
 8000680:	f7ff ff4e 	bl	8000520 <ILI9488_SendCommand>
    ILI9488_SendData(y0 >> 8);
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29b      	uxth	r3, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff6d 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(y0 & 0xFF);
 8000692:	88bb      	ldrh	r3, [r7, #4]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff68 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(y1 >> 8);
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff61 	bl	800056c <ILI9488_SendData>
    ILI9488_SendData(y1 & 0xFF);
 80006aa:	883b      	ldrh	r3, [r7, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff5c 	bl	800056c <ILI9488_SendData>

    ILI9488_SendCommand(ILI9488_CMD_MEMORY_WRITE);
 80006b4:	202c      	movs	r0, #44	@ 0x2c
 80006b6:	f7ff ff33 	bl	8000520 <ILI9488_SendCommand>
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}
	...

080006c4 <ILI9488_DrawPixel>:

// Draw a single pixel (avoid the use, it is very very slow for big volum of points)
void ILI9488_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
 80006ce:	460b      	mov	r3, r1
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	807b      	strh	r3, [r7, #2]
    // Convertir color de RGB565 → RGB666
    uint8_t r = ((color >> 11) & 0x1F) << 1; // 5 bits -> 6 bits
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	0adb      	lsrs	r3, r3, #11
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80006e6:	73fb      	strb	r3, [r7, #15]
    uint8_t g = ((color >> 5) & 0x3F);       // 6 bits
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006f4:	73bb      	strb	r3, [r7, #14]
    uint8_t b = ((color & 0x1F) << 1);        // 5 bits -> 6 bits
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000702:	737b      	strb	r3, [r7, #13]

    // Expandimos 6 bits a 8 bits (rellenando a la izquierda)
    r = r << 2;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	73fb      	strb	r3, [r7, #15]
    g = g << 2;
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	73bb      	strb	r3, [r7, #14]
    b = b << 2;
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	737b      	strb	r3, [r7, #13]

    // Seleccionar la ventana de 1x1 píxel
    ILI9488_SetWindow(x, y, x, y);
 8000716:	88bb      	ldrh	r3, [r7, #4]
 8000718:	88fa      	ldrh	r2, [r7, #6]
 800071a:	88b9      	ldrh	r1, [r7, #4]
 800071c:	88f8      	ldrh	r0, [r7, #6]
 800071e:	f7ff ff84 	bl	800062a <ILI9488_SetWindow>

    // Activar modo de transmisión de datos
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f001 fc4a 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <ILI9488_DrawPixel+0xa4>)
 8000736:	f001 fc45 	bl	8001fc4 <HAL_GPIO_WritePin>

    // Mandar 3 bytes para 1 píxel (RGB666)
    uint8_t data[3] = {r, g, b};
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	723b      	strb	r3, [r7, #8]
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	727b      	strb	r3, [r7, #9]
 8000742:	7b7b      	ldrb	r3, [r7, #13]
 8000744:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2203      	movs	r2, #3
 8000750:	4806      	ldr	r0, [pc, #24]	@ (800076c <ILI9488_DrawPixel+0xa8>)
 8000752:	f003 f812 	bl	800377a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <ILI9488_DrawPixel+0xa4>)
 800075c:	f001 fc32 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	48000400 	.word	0x48000400
 800076c:	20003e14 	.word	0x20003e14

08000770 <ILI9488_FillScreen_DMA>:

//Fill all the screen with a single color && DMA for a CPU better flow
void ILI9488_FillScreen_DMA(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
    // Conversión correcta a RGB666
    uint8_t r = ((color >> 11) & 0x1F) << 1;
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	0adb      	lsrs	r3, r3, #11
 800077e:	b29b      	uxth	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800078a:	73fb      	strb	r3, [r7, #15]
    uint8_t g = ((color >> 5) & 0x3F);
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000798:	73bb      	strb	r3, [r7, #14]
    uint8_t b = ((color & 0x1F) << 1);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80007a6:	737b      	strb	r3, [r7, #13]

    r = r << 2;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	73fb      	strb	r3, [r7, #15]
    g = g << 2;
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	73bb      	strb	r3, [r7, #14]
    b = b << 2;
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	737b      	strb	r3, [r7, #13]

    // Rellenar buffer de bloque
    for (int i = 0; i < ILI9488_WIDTH * BLOCK_ROWS; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e019      	b.n	80007f4 <ILI9488_FillScreen_DMA+0x84>
        dma_buffer[i * 3 + 0] = r;
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	4929      	ldr	r1, [pc, #164]	@ (8000870 <ILI9488_FillScreen_DMA+0x100>)
 80007ca:	7bfa      	ldrb	r2, [r7, #15]
 80007cc:	54ca      	strb	r2, [r1, r3]
        dma_buffer[i * 3 + 1] = g;
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	3301      	adds	r3, #1
 80007d8:	4925      	ldr	r1, [pc, #148]	@ (8000870 <ILI9488_FillScreen_DMA+0x100>)
 80007da:	7bba      	ldrb	r2, [r7, #14]
 80007dc:	54ca      	strb	r2, [r1, r3]
        dma_buffer[i * 3 + 2] = b;
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	3302      	adds	r3, #2
 80007e8:	4921      	ldr	r1, [pc, #132]	@ (8000870 <ILI9488_FillScreen_DMA+0x100>)
 80007ea:	7b7a      	ldrb	r2, [r7, #13]
 80007ec:	54ca      	strb	r2, [r1, r3]
    for (int i = 0; i < ILI9488_WIDTH * BLOCK_ROWS; i++) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 80007fa:	dbe1      	blt.n	80007c0 <ILI9488_FillScreen_DMA+0x50>
    }

    // Enviar pantalla por bloques
    for (int y = 0; y < ILI9488_HEIGHT; y += BLOCK_ROWS) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	e02d      	b.n	800085e <ILI9488_FillScreen_DMA+0xee>
        ILI9488_SetWindow(0, y, ILI9488_WIDTH - 1, y + BLOCK_ROWS - 1);
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	b299      	uxth	r1, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	b29b      	uxth	r3, r3
 800080a:	3309      	adds	r3, #9
 800080c:	b29b      	uxth	r3, r3
 800080e:	f240 12df 	movw	r2, #479	@ 0x1df
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ff09 	bl	800062a <ILI9488_SetWindow>

        HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f001 fbcf 	bl	8001fc4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4812      	ldr	r0, [pc, #72]	@ (8000874 <ILI9488_FillScreen_DMA+0x104>)
 800082c:	f001 fbca 	bl	8001fc4 <HAL_GPIO_WritePin>

        dma_done = 0;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <ILI9488_FillScreen_DMA+0x108>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit_DMA(&hspi1, dma_buffer, sizeof(dma_buffer));
 8000836:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <ILI9488_FillScreen_DMA+0x100>)
 800083c:	480f      	ldr	r0, [pc, #60]	@ (800087c <ILI9488_FillScreen_DMA+0x10c>)
 800083e:	f003 f913 	bl	8003a68 <HAL_SPI_Transmit_DMA>
        while (!dma_done);
 8000842:	bf00      	nop
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <ILI9488_FillScreen_DMA+0x108>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0fa      	beq.n	8000844 <ILI9488_FillScreen_DMA+0xd4>

        HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <ILI9488_FillScreen_DMA+0x104>)
 8000854:	f001 fbb6 	bl	8001fc4 <HAL_GPIO_WritePin>
    for (int y = 0; y < ILI9488_HEIGHT; y += BLOCK_ROWS) {
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	330a      	adds	r3, #10
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000864:	dbcd      	blt.n	8000802 <ILI9488_FillScreen_DMA+0x92>
    }
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000034 	.word	0x20000034
 8000874:	48000400 	.word	0x48000400
 8000878:	20000030 	.word	0x20000030
 800087c:	20003e14 	.word	0x20003e14

08000880 <ILI9488_Square>:

static uint8_t rect_buffer[ILI9488_WIDTH * PIXEL_SIZE];
void ILI9488_Square(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	4603      	mov	r3, r0
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
 800089a:	4613      	mov	r3, r2
 800089c:	803b      	strh	r3, [r7, #0]
	    if (x1 < x0 || y1 < y0 || x1 >= ILI9488_WIDTH || y1 >= ILI9488_HEIGHT) return;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	f0c0 8087 	bcc.w	80009b6 <ILI9488_Square+0x136>
 80008a8:	883a      	ldrh	r2, [r7, #0]
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f0c0 8082 	bcc.w	80009b6 <ILI9488_Square+0x136>
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80008b8:	d27d      	bcs.n	80009b6 <ILI9488_Square+0x136>
 80008ba:	883b      	ldrh	r3, [r7, #0]
 80008bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008c0:	d279      	bcs.n	80009b6 <ILI9488_Square+0x136>

	    uint8_t r = ((color >> 11) & 0x1F) << 1; // 5 bits -> 6 bits
 80008c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008c4:	0adb      	lsrs	r3, r3, #11
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80008d2:	73fb      	strb	r3, [r7, #15]
	    uint8_t g = ((color >> 5) & 0x3F);       // 6 bits
 80008d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008e0:	73bb      	strb	r3, [r7, #14]
	    uint8_t b = ((color & 0x1F) << 1);       // 5 bits -> 6 bits
 80008e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80008ee:	737b      	strb	r3, [r7, #13]

	    r <<= 2; g <<= 2; b <<= 2; // Expansión a 8 bits para ILI9488
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	73bb      	strb	r3, [r7, #14]
 80008fc:	7b7b      	ldrb	r3, [r7, #13]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	737b      	strb	r3, [r7, #13]

	    uint16_t width = x1 - x0 + 1;
 8000902:	887a      	ldrh	r2, [r7, #2]
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	3301      	adds	r3, #1
 800090c:	817b      	strh	r3, [r7, #10]
	    uint16_t height = y1 - y0 + 1;
 800090e:	883a      	ldrh	r2, [r7, #0]
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	813b      	strh	r3, [r7, #8]

	    // Preparar una línea del color deseado
	    for (int i = 0; i < width; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e019      	b.n	8000954 <ILI9488_Square+0xd4>
	        rect_buffer[i * 3 + 0] = r;
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	4925      	ldr	r1, [pc, #148]	@ (80009c0 <ILI9488_Square+0x140>)
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	54ca      	strb	r2, [r1, r3]
	        rect_buffer[i * 3 + 1] = g;
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	3301      	adds	r3, #1
 8000938:	4921      	ldr	r1, [pc, #132]	@ (80009c0 <ILI9488_Square+0x140>)
 800093a:	7bba      	ldrb	r2, [r7, #14]
 800093c:	54ca      	strb	r2, [r1, r3]
	        rect_buffer[i * 3 + 2] = b;
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	3302      	adds	r3, #2
 8000948:	491d      	ldr	r1, [pc, #116]	@ (80009c0 <ILI9488_Square+0x140>)
 800094a:	7b7a      	ldrb	r2, [r7, #13]
 800094c:	54ca      	strb	r2, [r1, r3]
	    for (int i = 0; i < width; i++) {
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbe1      	blt.n	8000920 <ILI9488_Square+0xa0>
	    }

	    // Definir ventana del rectángulo
	    ILI9488_SetWindow(x0, y0, x1, y1);
 800095c:	883b      	ldrh	r3, [r7, #0]
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	88b9      	ldrh	r1, [r7, #4]
 8000962:	88f8      	ldrh	r0, [r7, #6]
 8000964:	f7ff fe61 	bl	800062a <ILI9488_SetWindow>

	    // Empezar transmisión de líneas
	    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000972:	f001 fb27 	bl	8001fc4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <ILI9488_Square+0x144>)
 800097c:	f001 fb22 	bl	8001fc4 <HAL_GPIO_WritePin>

	    for (int y = 0; y < height; y++) {
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	e00d      	b.n	80009a2 <ILI9488_Square+0x122>
	        HAL_SPI_Transmit(&hspi1, rect_buffer, width * 3, HAL_MAX_DELAY);
 8000986:	897b      	ldrh	r3, [r7, #10]
 8000988:	461a      	mov	r2, r3
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	4413      	add	r3, r2
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	490a      	ldr	r1, [pc, #40]	@ (80009c0 <ILI9488_Square+0x140>)
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <ILI9488_Square+0x148>)
 8000998:	f002 feef 	bl	800377a <HAL_SPI_Transmit>
	    for (int y = 0; y < height; y++) {
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	3301      	adds	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	893b      	ldrh	r3, [r7, #8]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbed      	blt.n	8000986 <ILI9488_Square+0x106>
	    }

	    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <ILI9488_Square+0x144>)
 80009b0:	f001 fb08 	bl	8001fc4 <HAL_GPIO_WritePin>
 80009b4:	e000      	b.n	80009b8 <ILI9488_Square+0x138>
	    if (x1 < x0 || y1 < y0 || x1 >= ILI9488_WIDTH || y1 >= ILI9488_HEIGHT) return;
 80009b6:	bf00      	nop
}
 80009b8:	371c      	adds	r7, #28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	bf00      	nop
 80009c0:	20003874 	.word	0x20003874
 80009c4:	48000400 	.word	0x48000400
 80009c8:	20003e14 	.word	0x20003e14

080009cc <ILI9488_DrawBitmapRGB565>:

void ILI9488_DrawBitmapRGB565(uint16_t x0, uint16_t y0, uint16_t width, uint16_t height, const uint16_t *bitmap) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4608      	mov	r0, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	461a      	mov	r2, r3
 80009da:	4623      	mov	r3, r4
 80009dc:	80fb      	strh	r3, [r7, #6]
 80009de:	4603      	mov	r3, r0
 80009e0:	80bb      	strh	r3, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
 80009e6:	4613      	mov	r3, r2
 80009e8:	803b      	strh	r3, [r7, #0]
	 if (x0 + width > ILI9488_WIDTH || y0 + height > ILI9488_HEIGHT) return;
 80009ea:	88fa      	ldrh	r2, [r7, #6]
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	4413      	add	r3, r2
 80009f0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009f4:	dc6a      	bgt.n	8000acc <ILI9488_DrawBitmapRGB565+0x100>
 80009f6:	88ba      	ldrh	r2, [r7, #4]
 80009f8:	883b      	ldrh	r3, [r7, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a00:	dc64      	bgt.n	8000acc <ILI9488_DrawBitmapRGB565+0x100>

	    // Definir la ventana de dibujo
	    ILI9488_SetWindow(x0, y0, x0 + width - 1, y0 + height - 1);
 8000a02:	88fa      	ldrh	r2, [r7, #6]
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	b29c      	uxth	r4, r3
 8000a0e:	88ba      	ldrh	r2, [r7, #4]
 8000a10:	883b      	ldrh	r3, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3b01      	subs	r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	88b9      	ldrh	r1, [r7, #4]
 8000a1c:	88f8      	ldrh	r0, [r7, #6]
 8000a1e:	4622      	mov	r2, r4
 8000a20:	f7ff fe03 	bl	800062a <ILI9488_SetWindow>

	    // Preparar para mandar datos
	    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET); // DC = 1 -> Datos
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f001 fac9 	bl	8001fc4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET); // CS = 0 -> Activo
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	@ 0x40
 8000a36:	4827      	ldr	r0, [pc, #156]	@ (8000ad4 <ILI9488_DrawBitmapRGB565+0x108>)
 8000a38:	f001 fac4 	bl	8001fc4 <HAL_GPIO_WritePin>

	    uint8_t pixel_buffer[3];

	    // Para cada píxel
	    for (uint32_t i = 0; i < width * height; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e036      	b.n	8000ab0 <ILI9488_DrawBitmapRGB565+0xe4>
	        uint16_t color = bitmap[i];
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a48:	4413      	add	r3, r2
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	827b      	strh	r3, [r7, #18]

	        // Extraer componentes
	        uint8_t r = ((color >> 11) & 0x1F) << 1; // R5 -> R6
 8000a4e:	8a7b      	ldrh	r3, [r7, #18]
 8000a50:	0adb      	lsrs	r3, r3, #11
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000a5e:	747b      	strb	r3, [r7, #17]
	        uint8_t g = ((color >> 5) & 0x3F);        // G6
 8000a60:	8a7b      	ldrh	r3, [r7, #18]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a6c:	743b      	strb	r3, [r7, #16]
	        uint8_t b = ((color & 0x1F) <<1);        // B5 -> B6
 8000a6e:	8a7b      	ldrh	r3, [r7, #18]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000a7a:	73fb      	strb	r3, [r7, #15]

	        // Expandir a 8 bits
	        r <<= 2;
 8000a7c:	7c7b      	ldrb	r3, [r7, #17]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	747b      	strb	r3, [r7, #17]
	        g <<= 2;
 8000a82:	7c3b      	ldrb	r3, [r7, #16]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	743b      	strb	r3, [r7, #16]
	        b <<= 2;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	73fb      	strb	r3, [r7, #15]

	        // Guardar en orden BGR (por tu pantalla)
	        pixel_buffer[0] = b;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	733b      	strb	r3, [r7, #12]
	        pixel_buffer[1] = g;
 8000a92:	7c3b      	ldrb	r3, [r7, #16]
 8000a94:	737b      	strb	r3, [r7, #13]
	        pixel_buffer[2] = r;
 8000a96:	7c7b      	ldrb	r3, [r7, #17]
 8000a98:	73bb      	strb	r3, [r7, #14]

	        // Mandar un pixel
	        HAL_SPI_Transmit(&hspi1, pixel_buffer, 3, HAL_MAX_DELAY);
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <ILI9488_DrawBitmapRGB565+0x10c>)
 8000aa6:	f002 fe68 	bl	800377a <HAL_SPI_Transmit>
	    for (uint32_t i = 0; i < width * height; i++) {
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	883a      	ldrh	r2, [r7, #0]
 8000ab4:	fb02 f303 	mul.w	r3, r2, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d3c0      	bcc.n	8000a42 <ILI9488_DrawBitmapRGB565+0x76>
	    }

	    // Finalizar transmisión
	    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <ILI9488_DrawBitmapRGB565+0x108>)
 8000ac6:	f001 fa7d 	bl	8001fc4 <HAL_GPIO_WritePin>
 8000aca:	e000      	b.n	8000ace <ILI9488_DrawBitmapRGB565+0x102>
	 if (x0 + width > ILI9488_WIDTH || y0 + height > ILI9488_HEIGHT) return;
 8000acc:	bf00      	nop
}
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	20003e14 	.word	0x20003e14

08000adc <ILI9488_DrawChar>:

void ILI9488_DrawChar(uint16_t x, uint16_t y, char c, FontDef font, uint16_t color){
 8000adc:	b082      	sub	sp, #8
 8000ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae2:	b09d      	sub	sp, #116	@ 0x74
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aea:	4603      	mov	r3, r0
 8000aec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000af0:	460b      	mov	r3, r1
 8000af2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000af6:	4613      	mov	r3, r2
 8000af8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b





	uint32_t offset = (c - 32) * font.height * font.bytes;
 8000afc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b00:	f1a3 0220 	sub.w	r2, r3, #32
 8000b04:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b08:	fb03 f202 	mul.w	r2, r3, r2
 8000b0c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	65bb      	str	r3, [r7, #88]	@ 0x58
	    const uint8_t *bitmap = &font.table[offset];
 8000b16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b1c:	4413      	add	r3, r2
 8000b1e:	657b      	str	r3, [r7, #84]	@ 0x54

	    for (uint8_t row = 0; row < font.height; row++) {
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000b26:	e158      	b.n	8000dda <ILI9488_DrawChar+0x2fe>
	        uint64_t line = 0;
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	        if (font.height == 8) {
 8000b34:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d125      	bne.n	8000b88 <ILI9488_DrawChar+0xac>
	        	line = bitmap[row];
 8000b3c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b42:	4413      	add	r3, r2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	623b      	str	r3, [r7, #32]
 8000b4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000b52:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
				line = line >> (8 - font.width);
 8000b56:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000b5a:	f1c3 0408 	rsb	r4, r3, #8
 8000b5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000b62:	f1c4 0120 	rsb	r1, r4, #32
 8000b66:	f1a4 0020 	sub.w	r0, r4, #32
 8000b6a:	fa22 fa04 	lsr.w	sl, r2, r4
 8000b6e:	fa03 f101 	lsl.w	r1, r3, r1
 8000b72:	ea4a 0a01 	orr.w	sl, sl, r1
 8000b76:	fa23 f000 	lsr.w	r0, r3, r0
 8000b7a:	ea4a 0a00 	orr.w	sl, sl, r0
 8000b7e:	fa23 fb04 	lsr.w	fp, r3, r4
 8000b82:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8000b86:	e0d4      	b.n	8000d32 <ILI9488_DrawChar+0x256>
	        } else if (font.height == 16) {
 8000b88:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b8c:	2b10      	cmp	r3, #16
 8000b8e:	d133      	bne.n	8000bf8 <ILI9488_DrawChar+0x11c>
	        	line = (bitmap[row * font.bytes] << 8) | bitmap[row * font.bytes + 1];
 8000b90:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000b94:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0219      	lsls	r1, r3, #8
 8000ba6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000baa:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	17da      	asrs	r2, r3, #31
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	61fa      	str	r2, [r7, #28]
 8000bc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000bc6:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
				line = line >> (16 - font.width);
 8000bca:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000bce:	f1c3 0410 	rsb	r4, r3, #16
 8000bd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000bd6:	f1c4 0120 	rsb	r1, r4, #32
 8000bda:	f1a4 0020 	sub.w	r0, r4, #32
 8000bde:	fa22 f504 	lsr.w	r5, r2, r4
 8000be2:	fa03 f101 	lsl.w	r1, r3, r1
 8000be6:	430d      	orrs	r5, r1
 8000be8:	fa23 f000 	lsr.w	r0, r3, r0
 8000bec:	4305      	orrs	r5, r0
 8000bee:	fa23 f604 	lsr.w	r6, r3, r4
 8000bf2:	e9c7 5618 	strd	r5, r6, [r7, #96]	@ 0x60
 8000bf6:	e09c      	b.n	8000d32 <ILI9488_DrawChar+0x256>
	        } else if (font.height == 24) {
 8000bf8:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000bfc:	2b18      	cmp	r3, #24
 8000bfe:	d147      	bne.n	8000c90 <ILI9488_DrawChar+0x1b4>
	            line = (bitmap[row * font.bytes] << 16) | (bitmap[row * font.bytes + 1] << 8) | bitmap[row * font.bytes + 2];
 8000c00:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000c04:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0419      	lsls	r1, r3, #16
 8000c16:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000c1a:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000c32:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	1c9a      	adds	r2, r3, #2
 8000c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	430b      	orrs	r3, r1
 8000c44:	17da      	asrs	r2, r3, #31
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	617a      	str	r2, [r7, #20]
 8000c4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000c4e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			    line = line >> (24 - font.width);
 8000c52:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000c56:	f1c3 0418 	rsb	r4, r3, #24
 8000c5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000c5e:	f1c4 0120 	rsb	r1, r4, #32
 8000c62:	f1a4 0c20 	sub.w	ip, r4, #32
 8000c66:	fa22 f004 	lsr.w	r0, r2, r4
 8000c6a:	6438      	str	r0, [r7, #64]	@ 0x40
 8000c6c:	fa03 f101 	lsl.w	r1, r3, r1
 8000c70:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c72:	4308      	orrs	r0, r1
 8000c74:	6438      	str	r0, [r7, #64]	@ 0x40
 8000c76:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000c7c:	ea41 010c 	orr.w	r1, r1, ip
 8000c80:	6439      	str	r1, [r7, #64]	@ 0x40
 8000c82:	40e3      	lsrs	r3, r4
 8000c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c8a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
 8000c8e:	e050      	b.n	8000d32 <ILI9488_DrawChar+0x256>
	        } else if (font.height == 36) {
 8000c90:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000c94:	2b24      	cmp	r3, #36	@ 0x24
 8000c96:	d14c      	bne.n	8000d32 <ILI9488_DrawChar+0x256>
	        	line = (bitmap[row * font.bytes] << 24) | (bitmap[row * font.bytes + 1 ] << 16) | (bitmap[row * font.bytes + 2] << 8) | (bitmap[row * font.bytes + 3]);
 8000c98:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000c9c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0619      	lsls	r1, r3, #24
 8000cae:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000cb2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000cb6:	fb02 f303 	mul.w	r3, r2, r3
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	4319      	orrs	r1, r3
 8000cc6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000cca:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	1c9a      	adds	r2, r3, #2
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000ce2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	1cda      	adds	r2, r3, #3
 8000cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	17da      	asrs	r2, r3, #31
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	60fa      	str	r2, [r7, #12]
 8000cfa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cfe:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
	        	line = line >> (32 - font.width);
 8000d02:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000d06:	f1c3 0420 	rsb	r4, r3, #32
 8000d0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000d0e:	f1c4 0120 	rsb	r1, r4, #32
 8000d12:	f1a4 0020 	sub.w	r0, r4, #32
 8000d16:	fa22 f804 	lsr.w	r8, r2, r4
 8000d1a:	fa03 f101 	lsl.w	r1, r3, r1
 8000d1e:	ea48 0801 	orr.w	r8, r8, r1
 8000d22:	fa23 f000 	lsr.w	r0, r3, r0
 8000d26:	ea48 0800 	orr.w	r8, r8, r0
 8000d2a:	fa23 f904 	lsr.w	r9, r3, r4
 8000d2e:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
	        }
	        line &= (1 << font.width) - 1;
 8000d32:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000d36:	461a      	mov	r2, r3
 8000d38:	2301      	movs	r3, #1
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	17da      	asrs	r2, r3, #31
 8000d40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000d44:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000d4a:	4011      	ands	r1, r2
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000d50:	400b      	ands	r3, r1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000d58:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

	        for (uint8_t col = 0; col < font.width; col++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000d62:	e02f      	b.n	8000dc4 <ILI9488_DrawChar+0x2e8>
	        	if (line & (1 << (font.width - 1 - col))) {
 8000d64:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000d6e:	1ad2      	subs	r2, r2, r3
 8000d70:	2301      	movs	r3, #1
 8000d72:	4093      	lsls	r3, r2
 8000d74:	17da      	asrs	r2, r3, #31
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d78:	637a      	str	r2, [r7, #52]	@ 0x34
 8000d7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000d7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d80:	4011      	ands	r1, r2
 8000d82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000d84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000d86:	400b      	ands	r3, r1
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4313      	orrs	r3, r2
 8000d92:	d012      	beq.n	8000dba <ILI9488_DrawChar+0x2de>
	                ILI9488_DrawPixel(x + col, y + row, color);
 8000d94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000d9e:	4413      	add	r3, r2
 8000da0:	b298      	uxth	r0, r3
 8000da2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000dac:	4413      	add	r3, r2
 8000dae:	b299      	uxth	r1, r3
 8000db0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000db4:	461a      	mov	r2, r3
 8000db6:	f7ff fc85 	bl	80006c4 <ILI9488_DrawPixel>
	        for (uint8_t col = 0; col < font.width; col++) {
 8000dba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000dc4:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8000dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d3c9      	bcc.n	8000d64 <ILI9488_DrawChar+0x288>
	    for (uint8_t row = 0; row < font.height; row++) {
 8000dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000dda:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8000dde:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f4ff aea0 	bcc.w	8000b28 <ILI9488_DrawChar+0x4c>
	            }
	        }
	    }

}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3774      	adds	r7, #116	@ 0x74
 8000dee:	46bd      	mov	sp, r7
 8000df0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df4:	b002      	add	sp, #8
 8000df6:	4770      	bx	lr

08000df8 <ILI9488_DrawString>:

void ILI9488_DrawString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color){
 8000df8:	b082      	sub	sp, #8
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af02      	add	r7, sp, #8
 8000e00:	603a      	str	r2, [r7, #0]
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	4603      	mov	r3, r0
 8000e06:	80fb      	strh	r3, [r7, #6]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	80bb      	strh	r3, [r7, #4]
	uint16_t x_start = x;
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	81fb      	strh	r3, [r7, #14]
	while (*str) {
 8000e10:	e034      	b.n	8000e7c <ILI9488_DrawString+0x84>
		if(*str == '\n'){
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b0a      	cmp	r3, #10
 8000e18:	d10a      	bne.n	8000e30 <ILI9488_DrawString+0x38>
			y += font.height;
 8000e1a:	7f7b      	ldrb	r3, [r7, #29]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	80bb      	strh	r3, [r7, #4]
			x = x_start;
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	80fb      	strh	r3, [r7, #6]
			str++;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	603b      	str	r3, [r7, #0]
			continue;
 8000e2e:	e025      	b.n	8000e7c <ILI9488_DrawString+0x84>
		}
		if((x + font.width) > ILI9488_WIDTH){
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	7f3a      	ldrb	r2, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e3a:	dd06      	ble.n	8000e4a <ILI9488_DrawString+0x52>
			y += font.height;
 8000e3c:	7f7b      	ldrb	r3, [r7, #29]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	80bb      	strh	r3, [r7, #4]
			x = x_start;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	80fb      	strh	r3, [r7, #6]
		}
		if((y + font.height) > ILI9488_HEIGHT){
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	7f7a      	ldrb	r2, [r7, #29]
 8000e4e:	4413      	add	r3, r2
 8000e50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e54:	dc17      	bgt.n	8000e86 <ILI9488_DrawString+0x8e>
			break;
		}
		ILI9488_DrawChar(x, y, *str, font, color);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	88b9      	ldrh	r1, [r7, #4]
 8000e5c:	88f8      	ldrh	r0, [r7, #6]
 8000e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f7ff fe38 	bl	8000adc <ILI9488_DrawChar>
		x += font.width;
 8000e6c:	7f3b      	ldrb	r3, [r7, #28]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4413      	add	r3, r2
 8000e74:	80fb      	strh	r3, [r7, #6]
		str++;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1c6      	bne.n	8000e12 <ILI9488_DrawString+0x1a>
	    }
}
 8000e84:	e000      	b.n	8000e88 <ILI9488_DrawString+0x90>
			break;
 8000e86:	bf00      	nop
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e92:	b002      	add	sp, #8
 8000e94:	4770      	bx	lr
	...

08000e98 <carState_0_SC2>:
			ILI9488_DrawString(260, y_pos, status[sdown_status[i]], Font24, 0xFFFF);
			y_pos+=30;
	}
}
//MANDOS CENTRALES
void carState_0_SC2 (){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af02      	add	r7, sp, #8
	// ----- SCREEN 3 -----

	ILI9488_FillScreen_DMA(0x0000);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fc66 	bl	8000770 <ILI9488_FillScreen_DMA>
	ILI9488_DrawString(150, 10, "REFRI CONFIGURATION", Font24, 0xFFFF);
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <carState_0_SC2+0xa4>)
 8000ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eaa:	9201      	str	r2, [sp, #4]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	9200      	str	r2, [sp, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <carState_0_SC2+0xa8>)
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	2096      	movs	r0, #150	@ 0x96
 8000eb8:	f7ff ff9e 	bl	8000df8 <ILI9488_DrawString>
	ILI9488_DrawBitmapRGB565(25,50,120,220,refri_L);
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <carState_0_SC2+0xac>)
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	23dc      	movs	r3, #220	@ 0xdc
 8000ec2:	2278      	movs	r2, #120	@ 0x78
 8000ec4:	2132      	movs	r1, #50	@ 0x32
 8000ec6:	2019      	movs	r0, #25
 8000ec8:	f7ff fd80 	bl	80009cc <ILI9488_DrawBitmapRGB565>
	ILI9488_Square(76.2-25-1, 248.5+3, 76.8+76.2-25-6+1, 248.5+9.9+3, 0x07E0);
 8000ecc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	f240 1305 	movw	r3, #261	@ 0x105
 8000ed6:	227b      	movs	r2, #123	@ 0x7b
 8000ed8:	21fb      	movs	r1, #251	@ 0xfb
 8000eda:	2032      	movs	r0, #50	@ 0x32
 8000edc:	f7ff fcd0 	bl	8000880 <ILI9488_Square>
	//ILI9488_Square(50, 50, 170, 270, 0xf006);
	//ILI9488_Square(180, 57, 300, 107, 0x6629);
	ILI9488_DrawBitmapRGB565(335,50,120,220,refri_R);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <carState_0_SC2+0xb0>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	23dc      	movs	r3, #220	@ 0xdc
 8000ee6:	2278      	movs	r2, #120	@ 0x78
 8000ee8:	2132      	movs	r1, #50	@ 0x32
 8000eea:	f240 104f 	movw	r0, #335	@ 0x14f
 8000eee:	f7ff fd6d 	bl	80009cc <ILI9488_DrawBitmapRGB565>
	ILI9488_Square(333.3+24, 248.5, 429.1, 248.5+9.9, 0x07E0);
 8000ef2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000efc:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8000f00:	21f8      	movs	r1, #248	@ 0xf8
 8000f02:	f240 1065 	movw	r0, #357	@ 0x165
 8000f06:	f7ff fcbb 	bl	8000880 <ILI9488_Square>
	ILI9488_Square(180, 134, 300, 184, 0x6629);
 8000f0a:	f246 6329 	movw	r3, #26153	@ 0x6629
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	23b8      	movs	r3, #184	@ 0xb8
 8000f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f16:	2186      	movs	r1, #134	@ 0x86
 8000f18:	20b4      	movs	r0, #180	@ 0xb4
 8000f1a:	f7ff fcb1 	bl	8000880 <ILI9488_Square>
	ILI9488_Square(180, 211, 300, 261, 0xCB19);
 8000f1e:	f64c 3319 	movw	r3, #51993	@ 0xcb19
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	f240 1305 	movw	r3, #261	@ 0x105
 8000f28:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f2c:	21d3      	movs	r1, #211	@ 0xd3
 8000f2e:	20b4      	movs	r0, #180	@ 0xb4
 8000f30:	f7ff fca6 	bl	8000880 <ILI9488_Square>
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	08004c2c 	.word	0x08004c2c
 8000f44:	08006740 	.word	0x08006740
 8000f48:	08013580 	.word	0x08013580

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fae4 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f81a 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f8f6 	bl	8001148 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 f8d6 	bl	800110c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 f8a4 	bl	80010ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f64:	f000 f864 	bl	8001030 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8000f68:	f7ff fb3e 	bl	80005e8 <ILI9488_Init>


  ILI9488_FillScreen_DMA(0xFFFF);
 8000f6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f70:	f7ff fbfe 	bl	8000770 <ILI9488_FillScreen_DMA>
  /*
  carState_0_SC0 ();
  carState_0_SC1_ecus ();
  */
 // carState_0_SC0 ();
  HAL_Delay(3000);
 8000f74:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f78:	f000 fb4c 	bl	8001614 <HAL_Delay>
  carState_0_SC2();
 8000f7c:	f7ff ff8c 	bl	8000e98 <carState_0_SC2>
  HAL_Delay(3000);
 8000f80:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f84:	f000 fb46 	bl	8001614 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <main+0x3c>

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b096      	sub	sp, #88	@ 0x58
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2244      	movs	r2, #68	@ 0x44
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fd6d 	bl	8004a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fb2:	f001 f82d 	bl	8002010 <HAL_PWREx_ControlVoltageScaling>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fbc:	f000 f942 	bl	8001244 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f864 	bl	80020bc <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ffa:	f000 f923 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	2104      	movs	r1, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fc2c 	bl	8002874 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001022:	f000 f90f 	bl	8001244 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3758      	adds	r7, #88	@ 0x58
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <MX_SPI1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800103c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800104a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800104e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800105e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001062:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800107e:	2207      	movs	r2, #7
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI1_Init+0x74>)
 800108a:	2208      	movs	r2, #8
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001090:	f002 fad0 	bl	8003634 <HAL_SPI_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f8d3 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20003e14 	.word	0x20003e14
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <MX_USART2_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART2_UART_Init+0x58>)
 80010f0:	f002 ffa2 	bl	8004038 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 f8a3 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20003ec0 	.word	0x20003ec0
 8001108:	40004400 	.word	0x40004400

0800110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_DMA_Init+0x38>)
 8001114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <MX_DMA_Init+0x38>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6493      	str	r3, [r2, #72]	@ 0x48
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_DMA_Init+0x38>)
 8001120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200d      	movs	r0, #13
 8001130:	f000 fb6f 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001134:	200d      	movs	r0, #13
 8001136:	f000 fb88 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a35      	ldr	r2, [pc, #212]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <MX_GPIO_Init+0xf0>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a2f      	ldr	r2, [pc, #188]	@ (8001238 <MX_GPIO_Init+0xf0>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a29      	ldr	r2, [pc, #164]	@ (8001238 <MX_GPIO_Init+0xf0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <MX_GPIO_Init+0xf0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_GPIO_Init+0xf0>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <MX_GPIO_Init+0xf0>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_GPIO_Init+0xf0>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin|Reset_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f000 fefc 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2140      	movs	r1, #64	@ 0x40
 80011d0:	481a      	ldr	r0, [pc, #104]	@ (800123c <MX_GPIO_Init+0xf4>)
 80011d2:	f000 fef7 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4814      	ldr	r0, [pc, #80]	@ (8001240 <MX_GPIO_Init+0xf8>)
 80011ee:	f000 fd3f 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_RS_Pin Reset_Pin */
  GPIO_InitStruct.Pin = DC_RS_Pin|Reset_Pin;
 80011f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f000 fd2f 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001212:	2340      	movs	r3, #64	@ 0x40
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_GPIO_Init+0xf4>)
 800122a:	f000 fd21 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <Error_Handler+0x8>

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <HAL_MspInit+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6613      	str	r3, [r2, #96]	@ 0x60
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_MspInit+0x44>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_MspInit+0x44>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_MspInit+0x44>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001368 <HAL_SPI_MspInit+0xd0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d152      	bne.n	8001360 <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ba:	4b2c      	ldr	r3, [pc, #176]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	4a2b      	ldr	r2, [pc, #172]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c6:	4b29      	ldr	r3, [pc, #164]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a25      	ldr	r2, [pc, #148]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_SPI_MspInit+0xd4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	23e0      	movs	r3, #224	@ 0xe0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fa:	2305      	movs	r3, #5
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f000 fcb2 	bl	8001c70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 8001310:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001314:	2201      	movs	r2, #1
 8001316:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 800131a:	2210      	movs	r2, #16
 800131c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 800133e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001346:	f000 fa9b 	bl	8001880 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001350:	f7ff ff78 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40013000 	.word	0x40013000
 800136c:	40021000 	.word	0x40021000
 8001370:	20003e78 	.word	0x20003e78
 8001374:	40020030 	.word	0x40020030

08001378 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0ac      	sub	sp, #176	@ 0xb0
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2288      	movs	r2, #136	@ 0x88
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fb6e 	bl	8004a7a <memset>
  if(huart->Instance==USART2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <HAL_UART_MspInit+0xb0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13b      	bne.n	8001420 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fc81 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c0:	f7ff ff40 	bl	8001244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	4a18      	ldr	r2, [pc, #96]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	4a12      	ldr	r2, [pc, #72]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e8:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_UART_MspInit+0xb4>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013f4:	230c      	movs	r3, #12
 80013f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140c:	2307      	movs	r3, #7
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141c:	f000 fc28 	bl	8001c70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001420:	bf00      	nop
 8001422:	37b0      	adds	r7, #176	@ 0xb0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	40021000 	.word	0x40021000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <NMI_Handler+0x4>

08001438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <MemManage_Handler+0x4>

08001448 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f8a5 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Channel3_IRQHandler+0x10>)
 8001496:	f000 fb0b 	bl	8001ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20003e78 	.word	0x20003e78

080014a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	@ (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f003 fac9 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff fd27 	bl	8000f4c <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800150c:	08020418 	.word	0x08020418
  ldr r2, =_sbss
 8001510:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001514:	20003f4c 	.word	0x20003f4c

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>
	...

0800151c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_Init+0x3c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <HAL_Init+0x3c>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f962 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001538:	2000      	movs	r0, #0
 800153a:	f000 f80f 	bl	800155c <HAL_InitTick>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	e001      	b.n	800154e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800154a:	f7ff fe81 	bl	8001250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154e:	79fb      	ldrb	r3, [r7, #7]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40022000 	.word	0x40022000

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_InitTick+0x6c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d023      	beq.n	80015b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_InitTick+0x70>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_InitTick+0x6c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f96d 	bl	8001866 <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d809      	bhi.n	80015ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f937 	bl	8001812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a4:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <HAL_InitTick+0x74>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e007      	b.n	80015bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e004      	b.n	80015bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e001      	b.n	80015bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000010 	.word	0x20000010
 80015cc:	20000008 	.word	0x20000008
 80015d0:	2000000c 	.word	0x2000000c

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000010 	.word	0x20000010
 80015f8:	20003f48 	.word	0x20003f48

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20003f48 	.word	0x20003f48

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000010 	.word	0x20000010

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	@ (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e098      	b.n	80019c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <HAL_DMA_Init+0x150>)
 800189a:	429a      	cmp	r2, r3
 800189c:	d80f      	bhi.n	80018be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b4b      	ldr	r3, [pc, #300]	@ (80019d4 <HAL_DMA_Init+0x154>)
 80018a6:	4413      	add	r3, r2
 80018a8:	4a4b      	ldr	r2, [pc, #300]	@ (80019d8 <HAL_DMA_Init+0x158>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a48      	ldr	r2, [pc, #288]	@ (80019dc <HAL_DMA_Init+0x15c>)
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80018bc:	e00e      	b.n	80018dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_DMA_Init+0x160>)
 80018c6:	4413      	add	r3, r2
 80018c8:	4a43      	ldr	r2, [pc, #268]	@ (80019d8 <HAL_DMA_Init+0x158>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	009a      	lsls	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a42      	ldr	r2, [pc, #264]	@ (80019e4 <HAL_DMA_Init+0x164>)
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001936:	d039      	beq.n	80019ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <HAL_DMA_Init+0x15c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11a      	bne.n	8001978 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001942:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <HAL_DMA_Init+0x168>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f003 031c 	and.w	r3, r3, #28
 800194e:	210f      	movs	r1, #15
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	4924      	ldr	r1, [pc, #144]	@ (80019e8 <HAL_DMA_Init+0x168>)
 8001958:	4013      	ands	r3, r2
 800195a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <HAL_DMA_Init+0x168>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	491d      	ldr	r1, [pc, #116]	@ (80019e8 <HAL_DMA_Init+0x168>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e019      	b.n	80019ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <HAL_DMA_Init+0x16c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	f003 031c 	and.w	r3, r3, #28
 8001984:	210f      	movs	r1, #15
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	4917      	ldr	r1, [pc, #92]	@ (80019ec <HAL_DMA_Init+0x16c>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_DMA_Init+0x16c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 031c 	and.w	r3, r3, #28
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	4911      	ldr	r1, [pc, #68]	@ (80019ec <HAL_DMA_Init+0x16c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40020407 	.word	0x40020407
 80019d4:	bffdfff8 	.word	0xbffdfff8
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	40020000 	.word	0x40020000
 80019e0:	bffdfbf8 	.word	0xbffdfbf8
 80019e4:	40020400 	.word	0x40020400
 80019e8:	400200a8 	.word	0x400200a8
 80019ec:	400204a8 	.word	0x400204a8

080019f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Start_IT+0x20>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e04b      	b.n	8001aa8 <HAL_DMA_Start_IT+0xb8>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d13a      	bne.n	8001a9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f8e0 	bl	8001c0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 020e 	orr.w	r2, r2, #14
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e00f      	b.n	8001a88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 020a 	orr.w	r2, r2, #10
 8001a86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e005      	b.n	8001aa6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	f003 031c 	and.w	r3, r3, #28
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d026      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d021      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0204 	bic.w	r2, r2, #4
 8001b02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	f003 021c 	and.w	r2, r3, #28
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	2104      	movs	r1, #4
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d071      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b28:	e06c      	b.n	8001c04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f003 031c 	and.w	r3, r3, #28
 8001b32:	2202      	movs	r2, #2
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d02e      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xec>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d029      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 020a 	bic.w	r2, r2, #10
 8001b64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 021c 	and.w	r2, r3, #28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d038      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b9a:	e033      	b.n	8001c04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	f003 031c 	and.w	r3, r3, #28
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02a      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x156>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d025      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020e 	bic.w	r2, r2, #14
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	f003 021c 	and.w	r2, r3, #28
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
}
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f003 021c 	and.w	r2, r3, #28
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d108      	bne.n	8001c52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c50:	e007      	b.n	8001c62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e17f      	b.n	8001f80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8171 	beq.w	8001f7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d005      	beq.n	8001cb0 <HAL_GPIO_Init+0x40>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d130      	bne.n	8001d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 0201 	and.w	r2, r3, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d118      	bne.n	8001d50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80ac 	beq.w	8001f7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa0 <HAL_GPIO_Init+0x330>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e26:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa0 <HAL_GPIO_Init+0x330>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_GPIO_Init+0x330>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa4 <HAL_GPIO_Init+0x334>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa8 <HAL_GPIO_Init+0x338>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x23e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4e      	ldr	r2, [pc, #312]	@ (8001fac <HAL_GPIO_Init+0x33c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x23a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb0 <HAL_GPIO_Init+0x340>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x236>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb4 <HAL_GPIO_Init+0x344>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x232>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb8 <HAL_GPIO_Init+0x348>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x22e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <HAL_GPIO_Init+0x34c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x22a>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x244>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec4:	4937      	ldr	r1, [pc, #220]	@ (8001fa4 <HAL_GPIO_Init+0x334>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef6:	4a32      	ldr	r2, [pc, #200]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001efc:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f20:	4a27      	ldr	r2, [pc, #156]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f74:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <HAL_GPIO_Init+0x350>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f47f ae78 	bne.w	8001c80 <HAL_GPIO_Init+0x10>
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	48000800 	.word	0x48000800
 8001fb0:	48000c00 	.word	0x48000c00
 8001fb4:	48001000 	.word	0x48001000
 8001fb8:	48001400 	.word	0x48001400
 8001fbc:	48001800 	.word	0x48001800
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <HAL_PWREx_GetVoltageRange+0x18>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40007000 	.word	0x40007000

08002010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800201e:	d130      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002020:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800202c:	d038      	beq.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002036:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002038:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2232      	movs	r2, #50	@ 0x32
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9b      	lsrs	r3, r3, #18
 8002050:	3301      	adds	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002054:	e002      	b.n	800205c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002068:	d102      	bne.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x60>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f2      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207c:	d110      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e00f      	b.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208e:	d007      	beq.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	431bde83 	.word	0x431bde83

080020bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e3ca      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	4b97      	ldr	r3, [pc, #604]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	4b94      	ldr	r3, [pc, #592]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80e4 	beq.w	80022b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_RCC_OscConfig+0x4a>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	f040 808b 	bne.w	8002214 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b01      	cmp	r3, #1
 8002102:	f040 8087 	bne.w	8002214 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x62>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e3a2      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	4b82      	ldr	r3, [pc, #520]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_RCC_OscConfig+0x7c>
 800212e:	4b7f      	ldr	r3, [pc, #508]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002136:	e005      	b.n	8002144 <HAL_RCC_OscConfig+0x88>
 8002138:	4b7c      	ldr	r3, [pc, #496]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002144:	4293      	cmp	r3, r2
 8002146:	d223      	bcs.n	8002190 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fd55 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e383      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215c:	4b73      	ldr	r3, [pc, #460]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a72      	ldr	r2, [pc, #456]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b70      	ldr	r3, [pc, #448]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	496d      	ldr	r1, [pc, #436]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217a:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	4968      	ldr	r1, [pc, #416]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e025      	b.n	80021dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002190:	4b66      	ldr	r3, [pc, #408]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a65      	ldr	r2, [pc, #404]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4960      	ldr	r1, [pc, #384]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	4b5f      	ldr	r3, [pc, #380]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	495b      	ldr	r1, [pc, #364]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fd15 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e343      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021dc:	f000 fc4a 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b52      	ldr	r3, [pc, #328]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	4950      	ldr	r1, [pc, #320]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002334 <HAL_RCC_OscConfig+0x278>)
 80021fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f9ab 	bl	800155c <HAL_InitTick>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d052      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	e327      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800221c:	4b43      	ldr	r3, [pc, #268]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a42      	ldr	r2, [pc, #264]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002228:	f7ff f9e8 	bl	80015fc <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002230:	f7ff f9e4 	bl	80015fc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e310      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002242:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a36      	ldr	r2, [pc, #216]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4931      	ldr	r1, [pc, #196]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226c:	4b2f      	ldr	r3, [pc, #188]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	492c      	ldr	r1, [pc, #176]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e01a      	b.n	80022b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002282:	4b2a      	ldr	r3, [pc, #168]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a29      	ldr	r2, [pc, #164]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228e:	f7ff f9b5 	bl	80015fc <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002296:	f7ff f9b1 	bl	80015fc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e2dd      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a8:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x1da>
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d074      	beq.n	80023ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x21a>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d10e      	bne.n	80022ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d10b      	bne.n	80022ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d064      	beq.n	80023ac <HAL_RCC_OscConfig+0x2f0>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d160      	bne.n	80023ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e2ba      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x24a>
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e026      	b.n	8002354 <HAL_RCC_OscConfig+0x298>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230e:	d115      	bne.n	800233c <HAL_RCC_OscConfig+0x280>
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a05      	ldr	r2, [pc, #20]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a02      	ldr	r2, [pc, #8]	@ (800232c <HAL_RCC_OscConfig+0x270>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x298>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	080203c0 	.word	0x080203c0
 8002334:	20000008 	.word	0x20000008
 8002338:	2000000c 	.word	0x2000000c
 800233c:	4ba0      	ldr	r3, [pc, #640]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9f      	ldr	r2, [pc, #636]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b9d      	ldr	r3, [pc, #628]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a9c      	ldr	r2, [pc, #624]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f94e 	bl	80015fc <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f94a 	bl	80015fc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e276      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002376:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x2a8>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f93a 	bl	80015fc <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff f936 	bl	80015fc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e262      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239e:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x2d0>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d060      	beq.n	800247c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x310>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d119      	bne.n	80023fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d116      	bne.n	80023fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023cc:	4b7c      	ldr	r3, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x328>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e23f      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4973      	ldr	r1, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f8:	e040      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d023      	beq.n	800244a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002402:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7ff f8f5 	bl	80015fc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff f8f1 	bl	80015fc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e21d      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002428:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b62      	ldr	r3, [pc, #392]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	495f      	ldr	r1, [pc, #380]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
 8002448:	e018      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b5d      	ldr	r3, [pc, #372]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a5c      	ldr	r2, [pc, #368]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7ff f8d1 	bl	80015fc <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff f8cd 	bl	80015fc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1f9      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002470:	4b53      	ldr	r3, [pc, #332]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03c      	beq.n	8002502 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002490:	4b4b      	ldr	r3, [pc, #300]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002496:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff f8ac 	bl	80015fc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff f8a8 	bl	80015fc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1d4      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ef      	beq.n	80024a8 <HAL_RCC_OscConfig+0x3ec>
 80024c8:	e01b      	b.n	8002502 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d0:	4a3b      	ldr	r2, [pc, #236]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f88f 	bl	80015fc <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e2:	f7ff f88b 	bl	80015fc <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1b7      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ef      	bne.n	80024e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80a6 	beq.w	800265c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
 800252c:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002538:	2301      	movs	r3, #1
 800253a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCC_OscConfig+0x508>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d118      	bne.n	800257a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002548:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCC_OscConfig+0x508>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_RCC_OscConfig+0x508>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002552:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002554:	f7ff f852 	bl	80015fc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255c:	f7ff f84e 	bl	80015fc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e17a      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_RCC_OscConfig+0x508>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_RCC_OscConfig+0x4d8>
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002592:	e029      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d115      	bne.n	80025c8 <HAL_RCC_OscConfig+0x50c>
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	4a03      	ldr	r2, [pc, #12]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	4b9c      	ldr	r3, [pc, #624]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a9b      	ldr	r2, [pc, #620]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d8:	4b98      	ldr	r3, [pc, #608]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025de:	4a97      	ldr	r2, [pc, #604]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff f804 	bl	80015fc <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7ff f800 	bl	80015fc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e12a      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260e:	4b8b      	ldr	r3, [pc, #556]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ed      	beq.n	80025f8 <HAL_RCC_OscConfig+0x53c>
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe ffed 	bl	80015fc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe ffe9 	bl	80015fc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e113      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800263c:	4b7f      	ldr	r3, [pc, #508]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ed      	bne.n	8002626 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b7a      	ldr	r3, [pc, #488]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	4a79      	ldr	r2, [pc, #484]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80fe 	beq.w	8002862 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	2b02      	cmp	r3, #2
 800266c:	f040 80d0 	bne.w	8002810 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002670:	4b72      	ldr	r3, [pc, #456]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	429a      	cmp	r2, r3
 8002682:	d130      	bne.n	80026e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	3b01      	subs	r3, #1
 8002690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d127      	bne.n	80026e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11f      	bne.n	80026e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026b0:	2a07      	cmp	r2, #7
 80026b2:	bf14      	ite	ne
 80026b4:	2201      	movne	r2, #1
 80026b6:	2200      	moveq	r2, #0
 80026b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d113      	bne.n	80026e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d06e      	beq.n	80027c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d069      	beq.n	80027c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026f8:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0ad      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002708:	4b4c      	ldr	r3, [pc, #304]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4b      	ldr	r2, [pc, #300]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800270e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002714:	f7fe ff72 	bl	80015fc <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe ff6e 	bl	80015fc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e09a      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272e:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273a:	4b40      	ldr	r3, [pc, #256]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b40      	ldr	r3, [pc, #256]	@ (8002840 <HAL_RCC_OscConfig+0x784>)
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800274a:	3a01      	subs	r2, #1
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002754:	0212      	lsls	r2, r2, #8
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800275c:	0852      	lsrs	r2, r2, #1
 800275e:	3a01      	subs	r2, #1
 8002760:	0552      	lsls	r2, r2, #21
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002768:	0852      	lsrs	r2, r2, #1
 800276a:	3a01      	subs	r2, #1
 800276c:	0652      	lsls	r2, r2, #25
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002774:	0912      	lsrs	r2, r2, #4
 8002776:	0452      	lsls	r2, r2, #17
 8002778:	430a      	orrs	r2, r1
 800277a:	4930      	ldr	r1, [pc, #192]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800277c:	4313      	orrs	r3, r2
 800277e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a2a      	ldr	r2, [pc, #168]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002798:	f7fe ff30 	bl	80015fc <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe ff2c 	bl	80015fc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e058      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027be:	e050      	b.n	8002862 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04f      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d148      	bne.n	8002862 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a19      	ldr	r2, [pc, #100]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e8:	f7fe ff08 	bl	80015fc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe ff04 	bl	80015fc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e030      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x734>
 800280e:	e028      	b.n	8002862 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d023      	beq.n	800285e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <HAL_RCC_OscConfig+0x780>)
 800281c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe feeb 	bl	80015fc <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	e00c      	b.n	8002844 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fee7 	bl	80015fc <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d905      	bls.n	8002844 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e013      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
 800283c:	40021000 	.word	0x40021000
 8002840:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCC_OscConfig+0x7b0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ec      	bne.n	800282a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_OscConfig+0x7b0>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4905      	ldr	r1, [pc, #20]	@ (800286c <HAL_RCC_OscConfig+0x7b0>)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x7b4>)
 8002858:	4013      	ands	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e001      	b.n	8002862 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	feeefffc 	.word	0xfeeefffc

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0e7      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b75      	ldr	r3, [pc, #468]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b72      	ldr	r3, [pc, #456]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0207 	bic.w	r2, r3, #7
 800289e:	4970      	ldr	r1, [pc, #448]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0cf      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b66      	ldr	r3, [pc, #408]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d908      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b63      	ldr	r3, [pc, #396]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4960      	ldr	r1, [pc, #384]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04c      	beq.n	800298c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d121      	bne.n	800294a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0a6      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002912:	4b54      	ldr	r3, [pc, #336]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d115      	bne.n	800294a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e09a      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e08e      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e086      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4943      	ldr	r1, [pc, #268]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295c:	f7fe fe4e 	bl	80015fc <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe fe4a 	bl	80015fc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e06e      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d010      	beq.n	80029ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d208      	bcs.n	80029ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	492b      	ldr	r1, [pc, #172]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ba:	4b29      	ldr	r3, [pc, #164]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d210      	bcs.n	80029ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 0207 	bic.w	r2, r3, #7
 80029d0:	4923      	ldr	r1, [pc, #140]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d8:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <HAL_RCC_ClockConfig+0x1ec>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e036      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4918      	ldr	r1, [pc, #96]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a14:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4910      	ldr	r1, [pc, #64]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a28:	f000 f824 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	490b      	ldr	r1, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f4>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	4a09      	ldr	r2, [pc, #36]	@ (8002a6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1fc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd85 	bl	800155c <HAL_InitTick>
 8002a52:	4603      	mov	r3, r0
 8002a54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	080203c0 	.word	0x080203c0
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	2000000c 	.word	0x2000000c

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a82:	4b3e      	ldr	r3, [pc, #248]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d121      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d11e      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aa8:	4b34      	ldr	r3, [pc, #208]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ab4:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10d      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d102      	bne.n	8002af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aec:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e004      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002af8:	4b23      	ldr	r3, [pc, #140]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d134      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d003      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0xac>
 8002b18:	e005      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b1c:	617b      	str	r3, [r7, #20]
      break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b22:	617b      	str	r3, [r7, #20]
      break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	617b      	str	r3, [r7, #20]
      break;
 8002b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	3301      	adds	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	fb03 f202 	mul.w	r2, r3, r2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	0e5b      	lsrs	r3, r3, #25
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080203d8 	.word	0x080203d8
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200

08002b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4904      	ldr	r1, [pc, #16]	@ (8002bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	080203d0 	.word	0x080203d0

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bd4:	f7ff ffda 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0adb      	lsrs	r3, r3, #11
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4904      	ldr	r1, [pc, #16]	@ (8002bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080203d0 	.word	0x080203d0

08002bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c14:	f7ff f9ee 	bl	8001ff4 <HAL_PWREx_GetVoltageRange>
 8002c18:	6178      	str	r0, [r7, #20]
 8002c1a:	e014      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff f9de 	bl	8001ff4 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c4c:	d10b      	bne.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d919      	bls.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c58:	d902      	bls.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e013      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e010      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	@ 0x80
 8002c6a:	d902      	bls.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e00a      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	@ 0x80
 8002c76:	d102      	bne.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e004      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b70      	cmp	r3, #112	@ 0x70
 8002c82:	d101      	bne.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0207 	bic.w	r2, r3, #7
 8002c90:	4909      	ldr	r1, [pc, #36]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d041      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ce0:	d02a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ce2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ce6:	d824      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cec:	d008      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cf2:	d81e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d00:	4b86      	ldr	r3, [pc, #536]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a85      	ldr	r2, [pc, #532]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fabb 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fba6 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d40:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d4e:	4973      	ldr	r1, [pc, #460]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d041      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d70:	d02a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d76:	d824      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d82:	d81e      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d90:	4b62      	ldr	r3, [pc, #392]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a61      	ldr	r2, [pc, #388]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d9c:	e015      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fa73 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dae:	e00c      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3320      	adds	r3, #32
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb5e 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc0:	e003      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd0:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dde:	494f      	ldr	r1, [pc, #316]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002de6:	e001      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a0 	beq.w	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b41      	ldr	r3, [pc, #260]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	4a40      	ldr	r2, [pc, #256]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e20:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3a      	ldr	r2, [pc, #232]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fbde 	bl	80015fc <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e42:	e009      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe fbda 	bl	80015fc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	74fb      	strb	r3, [r7, #19]
        break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e58:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d15c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01f      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d019      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb4:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fb99 	bl	80015fc <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fe fb95 	bl	80015fc <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d902      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ec      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0a:	4904      	ldr	r1, [pc, #16]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f28:	7c7b      	ldrb	r3, [r7, #17]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b9e      	ldr	r3, [pc, #632]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	4a9d      	ldr	r2, [pc, #628]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f46:	4b98      	ldr	r3, [pc, #608]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f023 0203 	bic.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	4994      	ldr	r1, [pc, #592]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f68:	4b8f      	ldr	r3, [pc, #572]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f023 020c 	bic.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	498c      	ldr	r1, [pc, #560]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f8a:	4b87      	ldr	r3, [pc, #540]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	4983      	ldr	r1, [pc, #524]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fac:	4b7e      	ldr	r3, [pc, #504]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	497b      	ldr	r1, [pc, #492]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fce:	4b76      	ldr	r3, [pc, #472]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fdc:	4972      	ldr	r1, [pc, #456]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	496a      	ldr	r1, [pc, #424]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003018:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	4961      	ldr	r1, [pc, #388]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003034:	4b5c      	ldr	r3, [pc, #368]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	4959      	ldr	r1, [pc, #356]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003056:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003064:	4950      	ldr	r1, [pc, #320]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	4948      	ldr	r1, [pc, #288]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309a:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	493f      	ldr	r1, [pc, #252]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d028      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030bc:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ca:	4937      	ldr	r1, [pc, #220]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030da:	d106      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030dc:	4b32      	ldr	r3, [pc, #200]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a31      	ldr	r2, [pc, #196]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e6:	60d3      	str	r3, [r2, #12]
 80030e8:	e011      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030f2:	d10c      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f8c8 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800311a:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	491f      	ldr	r1, [pc, #124]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003138:	d106      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003144:	60d3      	str	r3, [r2, #12]
 8003146:	e011      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003150:	d10c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f899 	bl	8003290 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02b      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003186:	4908      	ldr	r1, [pc, #32]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003196:	d109      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a02      	ldr	r2, [pc, #8]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a2:	60d3      	str	r3, [r2, #12]
 80031a4:	e014      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f867 	bl	8003290 <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02f      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031dc:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ea:	4928      	ldr	r1, [pc, #160]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031fa:	d10d      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f844 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	74bb      	strb	r3, [r7, #18]
 8003216:	e011      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800321c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003220:	d10c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3320      	adds	r3, #32
 8003226:	2102      	movs	r1, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f925 	bl	8003478 <RCCEx_PLLSAI2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003256:	490d      	ldr	r1, [pc, #52]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800327a:	4904      	ldr	r1, [pc, #16]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003282:	7cbb      	ldrb	r3, [r7, #18]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000

08003290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800329e:	4b75      	ldr	r3, [pc, #468]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032aa:	4b72      	ldr	r3, [pc, #456]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
       ||
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
       ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d047      	beq.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e044      	b.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d018      	beq.n	8003316 <RCCEx_PLLSAI1_Config+0x86>
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d825      	bhi.n	8003334 <RCCEx_PLLSAI1_Config+0xa4>
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x62>
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d009      	beq.n	8003304 <RCCEx_PLLSAI1_Config+0x74>
 80032f0:	e020      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032f2:	4b60      	ldr	r3, [pc, #384]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003302:	e01a      	b.n	800333a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003304:	4b5b      	ldr	r3, [pc, #364]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003314:	e013      	b.n	800333e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003316:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003322:	4b54      	ldr	r3, [pc, #336]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003332:	e006      	b.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e004      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003342:	bf00      	nop
    }

    if(status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800334a:	4b4a      	ldr	r3, [pc, #296]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	430b      	orrs	r3, r1
 8003360:	4944      	ldr	r1, [pc, #272]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d17d      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800336c:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a40      	ldr	r2, [pc, #256]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fe f940 	bl	80015fc <HAL_GetTick>
 800337c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800337e:	e009      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003380:	f7fe f93c 	bl	80015fc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	73fb      	strb	r3, [r7, #15]
        break;
 8003392:	e005      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ef      	bne.n	8003380 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d160      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ac:	4b31      	ldr	r3, [pc, #196]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6892      	ldr	r2, [r2, #8]
 80033bc:	0211      	lsls	r1, r2, #8
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	0912      	lsrs	r2, r2, #4
 80033c4:	0452      	lsls	r2, r2, #17
 80033c6:	430a      	orrs	r2, r1
 80033c8:	492a      	ldr	r1, [pc, #168]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	610b      	str	r3, [r1, #16]
 80033ce:	e027      	b.n	8003420 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d112      	bne.n	80033fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d6:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6892      	ldr	r2, [r2, #8]
 80033e6:	0211      	lsls	r1, r2, #8
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6912      	ldr	r2, [r2, #16]
 80033ec:	0852      	lsrs	r2, r2, #1
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0552      	lsls	r2, r2, #21
 80033f2:	430a      	orrs	r2, r1
 80033f4:	491f      	ldr	r1, [pc, #124]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	610b      	str	r3, [r1, #16]
 80033fa:	e011      	b.n	8003420 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003404:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	0211      	lsls	r1, r2, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6952      	ldr	r2, [r2, #20]
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	0652      	lsls	r2, r2, #25
 8003418:	430a      	orrs	r2, r1
 800341a:	4916      	ldr	r1, [pc, #88]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003426:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800342a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe f8e6 	bl	80015fc <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003432:	e009      	b.n	8003448 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003434:	f7fe f8e2 	bl	80015fc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d902      	bls.n	8003448 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	73fb      	strb	r3, [r7, #15]
          break;
 8003446:	e005      	b.n	8003454 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	4904      	ldr	r1, [pc, #16]	@ (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000

08003478 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003486:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d018      	beq.n	80034c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003492:	4b67      	ldr	r3, [pc, #412]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10d      	bne.n	80034be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
       ||
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034aa:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d047      	beq.n	800354e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e044      	b.n	800354e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d018      	beq.n	80034fe <RCCEx_PLLSAI2_Config+0x86>
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d825      	bhi.n	800351c <RCCEx_PLLSAI2_Config+0xa4>
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d002      	beq.n	80034da <RCCEx_PLLSAI2_Config+0x62>
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d009      	beq.n	80034ec <RCCEx_PLLSAI2_Config+0x74>
 80034d8:	e020      	b.n	800351c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034da:	4b55      	ldr	r3, [pc, #340]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11d      	bne.n	8003522 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ea:	e01a      	b.n	8003522 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034ec:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fc:	e013      	b.n	8003526 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800350a:	4b49      	ldr	r3, [pc, #292]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800351a:	e006      	b.n	800352a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	e004      	b.n	800352c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800352a:	bf00      	nop
    }

    if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10d      	bne.n	800354e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003532:	4b3f      	ldr	r3, [pc, #252]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	430b      	orrs	r3, r1
 8003548:	4939      	ldr	r1, [pc, #228]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d167      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a35      	ldr	r2, [pc, #212]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800355e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003560:	f7fe f84c 	bl	80015fc <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003568:	f7fe f848 	bl	80015fc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
        break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ef      	bne.n	8003568 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d14a      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800359c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6892      	ldr	r2, [r2, #8]
 80035a4:	0211      	lsls	r1, r2, #8
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	0912      	lsrs	r2, r2, #4
 80035ac:	0452      	lsls	r2, r2, #17
 80035ae:	430a      	orrs	r2, r1
 80035b0:	491f      	ldr	r1, [pc, #124]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	614b      	str	r3, [r1, #20]
 80035b6:	e011      	b.n	80035dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6912      	ldr	r2, [r2, #16]
 80035ce:	0852      	lsrs	r2, r2, #1
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0652      	lsls	r2, r2, #25
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4916      	ldr	r1, [pc, #88]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f808 	bl	80015fc <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035f0:	f7fe f804 	bl	80015fc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
          break;
 8003602:	e005      	b.n	8003610 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4904      	ldr	r1, [pc, #16]	@ (8003630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000

08003634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e095      	b.n	8003772 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003656:	d009      	beq.n	800366c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
 800365e:	e005      	b.n	800366c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fe06 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036ac:	d902      	bls.n	80036b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e002      	b.n	80036ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036c2:	d007      	beq.n	80036d4 <HAL_SPI_Init+0xa0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036cc:	d002      	beq.n	80036d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003716:	ea42 0103 	orr.w	r1, r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	f003 0204 	and.w	r2, r3, #4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b088      	sub	sp, #32
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800378a:	f7fd ff37 	bl	80015fc <HAL_GetTick>
 800378e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d001      	beq.n	80037a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	e15c      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Transmit+0x36>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e154      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_Transmit+0x48>
 80037be:	2302      	movs	r3, #2
 80037c0:	e14d      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003814:	d10f      	bne.n	8003836 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003834:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d007      	beq.n	8003854 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800385c:	d952      	bls.n	8003904 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Transmit+0xf2>
 8003866:	8b7b      	ldrh	r3, [r7, #26]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d145      	bne.n	80038f8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003890:	e032      	b.n	80038f8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d112      	bne.n	80038c6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038c4:	e018      	b.n	80038f8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c6:	f7fd fe99 	bl	80015fc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d803      	bhi.n	80038de <HAL_SPI_Transmit+0x164>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Transmit+0x16a>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0b2      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1c7      	bne.n	8003892 <HAL_SPI_Transmit+0x118>
 8003902:	e083      	b.n	8003a0c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_Transmit+0x198>
 800390c:	8b7b      	ldrh	r3, [r7, #26]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d177      	bne.n	8003a02 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d912      	bls.n	8003942 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b02      	subs	r3, #2
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003940:	e05f      	b.n	8003a02 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003968:	e04b      	b.n	8003a02 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d12b      	bne.n	80039d0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d912      	bls.n	80039a8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b02      	subs	r3, #2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039a6:	e02c      	b.n	8003a02 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	7812      	ldrb	r2, [r2, #0]
 80039b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039ce:	e018      	b.n	8003a02 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d0:	f7fd fe14 	bl	80015fc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d803      	bhi.n	80039e8 <HAL_SPI_Transmit+0x26e>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x274>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e02d      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ae      	bne.n	800396a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 facb 	bl	8003fac <SPI_EndRxTxTransaction>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d001      	beq.n	8003a86 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	e0d4      	b.n	8003c30 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_SPI_Transmit_DMA+0x2a>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0cc      	b.n	8003c30 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_SPI_Transmit_DMA+0x3c>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e0c5      	b.n	8003c30 <HAL_SPI_Transmit_DMA+0x1c8>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af6:	d10f      	bne.n	8003b18 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	4a46      	ldr	r2, [pc, #280]	@ (8003c38 <HAL_SPI_Transmit_DMA+0x1d0>)
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	4a45      	ldr	r2, [pc, #276]	@ (8003c3c <HAL_SPI_Transmit_DMA+0x1d4>)
 8003b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	4a44      	ldr	r2, [pc, #272]	@ (8003c40 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003b2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2200      	movs	r2, #0
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b46:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b50:	d82d      	bhi.n	8003bae <HAL_SPI_Transmit_DMA+0x146>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	d127      	bne.n	8003bae <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b7a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b8a:	e010      	b.n	8003bae <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bc6:	f7fd ff13 	bl	80019f0 <HAL_DMA_Start_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e023      	b.n	8003c30 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d007      	beq.n	8003c06 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c04:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0220 	orr.w	r2, r2, #32
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0202 	orr.w	r2, r2, #2
 8003c2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	08003d13 	.word	0x08003d13
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003d2f 	.word	0x08003d2f

08003c44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c7a:	f7fd fcbf 	bl	80015fc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d03b      	beq.n	8003d06 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0220 	bic.w	r2, r2, #32
 8003c9c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0202 	bic.w	r2, r2, #2
 8003cac:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	2164      	movs	r1, #100	@ 0x64
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f000 f97a 	bl	8003fac <SPI_EndRxTxTransaction>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7ff ffaa 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d04:	e002      	b.n	8003d0c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7fc fbf4 	bl	80004f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff ff8f 	bl	8003c44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0203 	bic.w	r2, r2, #3
 8003d4a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff79 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d80:	f7fd fc3c 	bl	80015fc <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d90:	f7fd fc34 	bl	80015fc <HAL_GetTick>
 8003d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d96:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	015b      	lsls	r3, r3, #5
 8003d9c:	0d1b      	lsrs	r3, r3, #20
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da6:	e054      	b.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d050      	beq.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db0:	f7fd fc24 	bl	80015fc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d902      	bls.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d13d      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dde:	d111      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de8:	d004      	beq.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df2:	d107      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e0c:	d10f      	bne.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e017      	b.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d19b      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000008 	.word	0x20000008

08003e80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	@ 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e92:	f7fd fbb3 	bl	80015fc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ea2:	f7fd fbab 	bl	80015fc <HAL_GetTick>
 8003ea6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	00da      	lsls	r2, r3, #3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	0d1b      	lsrs	r3, r3, #20
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ec8:	e060      	b.n	8003f8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ed0:	d107      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d050      	beq.n	8003f8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eea:	f7fd fb87 	bl	80015fc <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d902      	bls.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d13d      	bne.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f18:	d111      	bne.n	8003f3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f22:	d004      	beq.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2c:	d107      	bne.n	8003f3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f46:	d10f      	bne.n	8003f68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e010      	b.n	8003f9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d196      	bne.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3728      	adds	r7, #40	@ 0x28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008

08003fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff5b 	bl	8003e80 <SPI_WaitFifoStateUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e027      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	@ 0x80
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff fec0 	bl	8003d70 <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e014      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ff34 	bl	8003e80 <SPI_WaitFifoStateUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e000      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e040      	b.n	80040cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f98c 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	@ 0x24
 8004064:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fae0 	bl	8004644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f825 	bl	80040d4 <UART_SetConfig>
 800408a:	4603      	mov	r3, r0
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e01b      	b.n	80040cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fb5f 	bl	8004788 <UART_CheckIdleState>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d8:	b08a      	sub	sp, #40	@ 0x28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4ba4      	ldr	r3, [pc, #656]	@ (8004394 <UART_SetConfig+0x2c0>)
 8004104:	4013      	ands	r3, r2
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800410c:	430b      	orrs	r3, r1
 800410e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a99      	ldr	r2, [pc, #612]	@ (8004398 <UART_SetConfig+0x2c4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	4313      	orrs	r3, r2
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a90      	ldr	r2, [pc, #576]	@ (800439c <UART_SetConfig+0x2c8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d126      	bne.n	80041ac <UART_SetConfig+0xd8>
 800415e:	4b90      	ldr	r3, [pc, #576]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d81b      	bhi.n	80041a4 <UART_SetConfig+0xd0>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <UART_SetConfig+0xa0>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004185 	.word	0x08004185
 8004178:	08004195 	.word	0x08004195
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419d 	.word	0x0800419d
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e116      	b.n	80043ba <UART_SetConfig+0x2e6>
 800418c:	2302      	movs	r3, #2
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e112      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e10e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e10a      	b.n	80043ba <UART_SetConfig+0x2e6>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e106      	b.n	80043ba <UART_SetConfig+0x2e6>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a7c      	ldr	r2, [pc, #496]	@ (80043a4 <UART_SetConfig+0x2d0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d138      	bne.n	8004228 <UART_SetConfig+0x154>
 80041b6:	4b7a      	ldr	r3, [pc, #488]	@ (80043a0 <UART_SetConfig+0x2cc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d82d      	bhi.n	8004220 <UART_SetConfig+0x14c>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <UART_SetConfig+0xf8>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004221 	.word	0x08004221
 80041d4:	08004221 	.word	0x08004221
 80041d8:	08004221 	.word	0x08004221
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004221 	.word	0x08004221
 80041ec:	08004209 	.word	0x08004209
 80041f0:	08004221 	.word	0x08004221
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004219 	.word	0x08004219
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e0d8      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004208:	2302      	movs	r3, #2
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e0d4      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004210:	2304      	movs	r3, #4
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e0d0      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004218:	2308      	movs	r3, #8
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e0cc      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004220:	2310      	movs	r3, #16
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e0c8      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5e      	ldr	r2, [pc, #376]	@ (80043a8 <UART_SetConfig+0x2d4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d125      	bne.n	800427e <UART_SetConfig+0x1aa>
 8004232:	4b5b      	ldr	r3, [pc, #364]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800423c:	2b30      	cmp	r3, #48	@ 0x30
 800423e:	d016      	beq.n	800426e <UART_SetConfig+0x19a>
 8004240:	2b30      	cmp	r3, #48	@ 0x30
 8004242:	d818      	bhi.n	8004276 <UART_SetConfig+0x1a2>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d00a      	beq.n	800425e <UART_SetConfig+0x18a>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d814      	bhi.n	8004276 <UART_SetConfig+0x1a2>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <UART_SetConfig+0x182>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d008      	beq.n	8004266 <UART_SetConfig+0x192>
 8004254:	e00f      	b.n	8004276 <UART_SetConfig+0x1a2>
 8004256:	2300      	movs	r3, #0
 8004258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425c:	e0ad      	b.n	80043ba <UART_SetConfig+0x2e6>
 800425e:	2302      	movs	r3, #2
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004264:	e0a9      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004266:	2304      	movs	r3, #4
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426c:	e0a5      	b.n	80043ba <UART_SetConfig+0x2e6>
 800426e:	2308      	movs	r3, #8
 8004270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004274:	e0a1      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004276:	2310      	movs	r3, #16
 8004278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427c:	e09d      	b.n	80043ba <UART_SetConfig+0x2e6>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4a      	ldr	r2, [pc, #296]	@ (80043ac <UART_SetConfig+0x2d8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d125      	bne.n	80042d4 <UART_SetConfig+0x200>
 8004288:	4b45      	ldr	r3, [pc, #276]	@ (80043a0 <UART_SetConfig+0x2cc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004292:	2bc0      	cmp	r3, #192	@ 0xc0
 8004294:	d016      	beq.n	80042c4 <UART_SetConfig+0x1f0>
 8004296:	2bc0      	cmp	r3, #192	@ 0xc0
 8004298:	d818      	bhi.n	80042cc <UART_SetConfig+0x1f8>
 800429a:	2b80      	cmp	r3, #128	@ 0x80
 800429c:	d00a      	beq.n	80042b4 <UART_SetConfig+0x1e0>
 800429e:	2b80      	cmp	r3, #128	@ 0x80
 80042a0:	d814      	bhi.n	80042cc <UART_SetConfig+0x1f8>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <UART_SetConfig+0x1d8>
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d008      	beq.n	80042bc <UART_SetConfig+0x1e8>
 80042aa:	e00f      	b.n	80042cc <UART_SetConfig+0x1f8>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e082      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042b4:	2302      	movs	r3, #2
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e07e      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042bc:	2304      	movs	r3, #4
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e07a      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042c4:	2308      	movs	r3, #8
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ca:	e076      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042cc:	2310      	movs	r3, #16
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e072      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a35      	ldr	r2, [pc, #212]	@ (80043b0 <UART_SetConfig+0x2dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12a      	bne.n	8004334 <UART_SetConfig+0x260>
 80042de:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <UART_SetConfig+0x2cc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ec:	d01a      	beq.n	8004324 <UART_SetConfig+0x250>
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f2:	d81b      	bhi.n	800432c <UART_SetConfig+0x258>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d00c      	beq.n	8004314 <UART_SetConfig+0x240>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fe:	d815      	bhi.n	800432c <UART_SetConfig+0x258>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0x238>
 8004304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x248>
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x258>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e052      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e04e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e04a      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e046      	b.n	80043ba <UART_SetConfig+0x2e6>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e042      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <UART_SetConfig+0x2c4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d13a      	bne.n	80043b4 <UART_SetConfig+0x2e0>
 800433e:	4b18      	ldr	r3, [pc, #96]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800434c:	d01a      	beq.n	8004384 <UART_SetConfig+0x2b0>
 800434e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004352:	d81b      	bhi.n	800438c <UART_SetConfig+0x2b8>
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004358:	d00c      	beq.n	8004374 <UART_SetConfig+0x2a0>
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435e:	d815      	bhi.n	800438c <UART_SetConfig+0x2b8>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x298>
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004368:	d008      	beq.n	800437c <UART_SetConfig+0x2a8>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x2b8>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e022      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e01e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e01a      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e016      	b.n	80043ba <UART_SetConfig+0x2e6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e012      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004394:	efff69f3 	.word	0xefff69f3
 8004398:	40008000 	.word	0x40008000
 800439c:	40013800 	.word	0x40013800
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40004400 	.word	0x40004400
 80043a8:	40004800 	.word	0x40004800
 80043ac:	40004c00 	.word	0x40004c00
 80043b0:	40005000 	.word	0x40005000
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a9f      	ldr	r2, [pc, #636]	@ (800463c <UART_SetConfig+0x568>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d17a      	bne.n	80044ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d824      	bhi.n	8004416 <UART_SetConfig+0x342>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <UART_SetConfig+0x300>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004407 	.word	0x08004407
 80043e8:	08004417 	.word	0x08004417
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004417 	.word	0x08004417
 80043f4:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe fbd4 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b8f      	ldr	r3, [pc, #572]	@ (8004640 <UART_SetConfig+0x56c>)
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe fb35 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 800440a:	61f8      	str	r0, [r7, #28]
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80fb 	beq.w	8004620 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	429a      	cmp	r2, r3
 8004438:	d305      	bcc.n	8004446 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800444c:	e0e8      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2200      	movs	r2, #0
 8004452:	461c      	mov	r4, r3
 8004454:	4615      	mov	r5, r2
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	022b      	lsls	r3, r5, #8
 8004460:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004464:	0222      	lsls	r2, r4, #8
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	6849      	ldr	r1, [r1, #4]
 800446a:	0849      	lsrs	r1, r1, #1
 800446c:	2000      	movs	r0, #0
 800446e:	4688      	mov	r8, r1
 8004470:	4681      	mov	r9, r0
 8004472:	eb12 0a08 	adds.w	sl, r2, r8
 8004476:	eb43 0b09 	adc.w	fp, r3, r9
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449e:	d308      	bcc.n	80044b2 <UART_SetConfig+0x3de>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a6:	d204      	bcs.n	80044b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	e0b6      	b.n	8004620 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044b8:	e0b2      	b.n	8004620 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c2:	d15e      	bne.n	8004582 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d828      	bhi.n	800451e <UART_SetConfig+0x44a>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0x400>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fe fb54 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61f8      	str	r0, [r7, #28]
        break;
 80044fe:	e014      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe fb66 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b4d      	ldr	r3, [pc, #308]	@ (8004640 <UART_SetConfig+0x56c>)
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e00d      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fe fab1 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8004512:	61f8      	str	r0, [r7, #28]
        break;
 8004514:	e009      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
        break;
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d077      	beq.n	8004620 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	005a      	lsls	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0f      	cmp	r3, #15
 800454a:	d916      	bls.n	800457a <UART_SetConfig+0x4a6>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d212      	bcs.n	800457a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f023 030f 	bic.w	r3, r3, #15
 800455c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	b29a      	uxth	r2, r3
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	4313      	orrs	r3, r2
 800456e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	8afa      	ldrh	r2, [r7, #22]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e052      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e04e      	b.n	8004620 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004586:	2b08      	cmp	r3, #8
 8004588:	d827      	bhi.n	80045da <UART_SetConfig+0x506>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <UART_SetConfig+0x4bc>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe faf6 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e014      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7fe fb08 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e010      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <UART_SetConfig+0x56c>)
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e00d      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7fe fa53 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80045ce:	61f8      	str	r0, [r7, #28]
        break;
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d6:	61fb      	str	r3, [r7, #28]
        break;
 80045d8:	e005      	b.n	80045e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045e4:	bf00      	nop
    }

    if (pclk != 0U)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	085a      	lsrs	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	441a      	add	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d909      	bls.n	800461a <UART_SetConfig+0x546>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	d205      	bcs.n	800461a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e002      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800462c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463a:	bf00      	nop
 800463c:	40008000 	.word	0x40008000
 8004640:	00f42400 	.word	0x00f42400

08004644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004742:	d10a      	bne.n	800475a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b098      	sub	sp, #96	@ 0x60
 800478c:	af02      	add	r7, sp, #8
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004798:	f7fc ff30 	bl	80015fc <HAL_GetTick>
 800479c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d12e      	bne.n	800480a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f88c 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047da:	653b      	str	r3, [r7, #80]	@ 0x50
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e6      	bne.n	80047c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e062      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d149      	bne.n	80048ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004820:	2200      	movs	r2, #0
 8004822:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f856 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d03c      	beq.n	80048ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	623b      	str	r3, [r7, #32]
   return(result);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60fb      	str	r3, [r7, #12]
   return(result);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	617b      	str	r3, [r7, #20]
   return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e011      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3758      	adds	r7, #88	@ 0x58
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e04f      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d04b      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fc fe83 	bl	80015fc <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e04e      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d037      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d034      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d031      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d110      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2208      	movs	r2, #8
 800493a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f838 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2208      	movs	r2, #8
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e029      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004964:	d111      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f81e 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0a0      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b095      	sub	sp, #84	@ 0x54
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d118      	bne.n	8004a5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	613b      	str	r3, [r7, #16]
   return(result);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a6e:	bf00      	nop
 8004a70:	3754      	adds	r7, #84	@ 0x54
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <memset>:
 8004a7a:	4402      	add	r2, r0
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d100      	bne.n	8004a84 <memset+0xa>
 8004a82:	4770      	bx	lr
 8004a84:	f803 1b01 	strb.w	r1, [r3], #1
 8004a88:	e7f9      	b.n	8004a7e <memset+0x4>
	...

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ac4 <__libc_init_array+0x38>)
 8004a90:	4c0d      	ldr	r4, [pc, #52]	@ (8004ac8 <__libc_init_array+0x3c>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	2600      	movs	r6, #0
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8004acc <__libc_init_array+0x40>)
 8004a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ad0 <__libc_init_array+0x44>)
 8004aa0:	f000 f818 	bl	8004ad4 <_init>
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	08020410 	.word	0x08020410
 8004ac8:	08020410 	.word	0x08020410
 8004acc:	08020410 	.word	0x08020410
 8004ad0:	08020414 	.word	0x08020414

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
